Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CADENA
    CARACTER
    CHAR
    COMA
    CONTINUE
    CORDER
    CORIZQ
    COS
    DECIMAL
    DIFERENTE
    DIV
    DOLAR
    DOSPUNTOS
    DOSPUNTOSDOSPUNTOS
    ELSE
    ELSEIF
    END
    ENTERO
    FALSE
    FLOAT
    FLOAT64
    FOR
    FUNCTION
    GLOBAL
    ID
    IF
    IGUAL
    IGUALIGUAL
    IN
    INT64
    LOCAL
    LOG
    LOG10
    LOWERCASE
    MAS
    MAYOR
    MAYORIGUAL
    MENOR
    MENORIGUAL
    MENOS
    MODULO
    MUTABLE
    NOT
    NULO
    OR
    PARSE
    POR
    POTENCIA
    PUNTO
    RETURN
    SIN
    SQRT
    STRING
    STRUCT
    TAN
    TRUE
    TRUNC
    TYPEOF
    UPPERCASE
    WHILE

Grammar

Rule 0     S' -> inicio
Rule 1     inicio -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_instr
Rule 5     print_instr -> PRINT PARIZQ PARDER PUNTOYCOMA
Rule 6     print_instr -> PRINTLN PARIZQ PARDER PUNTOYCOMA

Terminals, with rules where they appear

AND                  : 
BREAK                : 
CADENA               : 
CARACTER             : 
CHAR                 : 
COMA                 : 
CONTINUE             : 
CORDER               : 
CORIZQ               : 
COS                  : 
DECIMAL              : 
DIFERENTE            : 
DIV                  : 
DOLAR                : 
DOSPUNTOS            : 
DOSPUNTOSDOSPUNTOS   : 
ELSE                 : 
ELSEIF               : 
END                  : 
ENTERO               : 
FALSE                : 
FLOAT                : 
FLOAT64              : 
FOR                  : 
FUNCTION             : 
GLOBAL               : 
ID                   : 
IF                   : 
IGUAL                : 
IGUALIGUAL           : 
IN                   : 
INT64                : 
LOCAL                : 
LOG                  : 
LOG10                : 
LOWERCASE            : 
MAS                  : 
MAYOR                : 
MAYORIGUAL           : 
MENOR                : 
MENORIGUAL           : 
MENOS                : 
MODULO               : 
MUTABLE              : 
NOT                  : 
NULO                 : 
OR                   : 
PARDER               : 5 6
PARIZQ               : 5 6
PARSE                : 
POR                  : 
POTENCIA             : 
PRINT                : 5
PRINTLN              : 6
PUNTO                : 
PUNTOYCOMA           : 5 6
RETURN               : 
SIN                  : 
SQRT                 : 
STRING               : 
STRUCT               : 
TAN                  : 
TRUE                 : 
TRUNC                : 
TYPEOF               : 
UPPERCASE            : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

inicio               : 0
instruccion          : 2 3
instrucciones        : 1 2
print_instr          : 4

Parsing method: LALR

state 0

    (0) S' -> . inicio
    (1) inicio -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr
    (5) print_instr -> . PRINT PARIZQ PARDER PUNTOYCOMA
    (6) print_instr -> . PRINTLN PARIZQ PARDER PUNTOYCOMA

    PRINT           shift and go to state 5
    PRINTLN         shift and go to state 6

    inicio                         shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4

state 1

    (0) S' -> inicio .



state 2

    (1) inicio -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr
    (5) print_instr -> . PRINT PARIZQ PARDER PUNTOYCOMA
    (6) print_instr -> . PRINTLN PARIZQ PARDER PUNTOYCOMA

    $end            reduce using rule 1 (inicio -> instrucciones .)
    PRINT           shift and go to state 5
    PRINTLN         shift and go to state 6

    instruccion                    shift and go to state 7
    print_instr                    shift and go to state 4

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_instr .

    PRINT           reduce using rule 4 (instruccion -> print_instr .)
    PRINTLN         reduce using rule 4 (instruccion -> print_instr .)
    $end            reduce using rule 4 (instruccion -> print_instr .)


state 5

    (5) print_instr -> PRINT . PARIZQ PARDER PUNTOYCOMA

    PARIZQ          shift and go to state 8


state 6

    (6) print_instr -> PRINTLN . PARIZQ PARDER PUNTOYCOMA

    PARIZQ          shift and go to state 9


state 7

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 8

    (5) print_instr -> PRINT PARIZQ . PARDER PUNTOYCOMA

    PARDER          shift and go to state 10


state 9

    (6) print_instr -> PRINTLN PARIZQ . PARDER PUNTOYCOMA

    PARDER          shift and go to state 11


state 10

    (5) print_instr -> PRINT PARIZQ PARDER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 12


state 11

    (6) print_instr -> PRINTLN PARIZQ PARDER . PUNTOYCOMA

    PUNTOYCOMA      shift and go to state 13


state 12

    (5) print_instr -> PRINT PARIZQ PARDER PUNTOYCOMA .

    PRINT           reduce using rule 5 (print_instr -> PRINT PARIZQ PARDER PUNTOYCOMA .)
    PRINTLN         reduce using rule 5 (print_instr -> PRINT PARIZQ PARDER PUNTOYCOMA .)
    $end            reduce using rule 5 (print_instr -> PRINT PARIZQ PARDER PUNTOYCOMA .)


state 13

    (6) print_instr -> PRINTLN PARIZQ PARDER PUNTOYCOMA .

    PRINT           reduce using rule 6 (print_instr -> PRINTLN PARIZQ PARDER PUNTOYCOMA .)
    PRINTLN         reduce using rule 6 (print_instr -> PRINTLN PARIZQ PARDER PUNTOYCOMA .)
    $end            reduce using rule 6 (print_instr -> PRINTLN PARIZQ PARDER PUNTOYCOMA .)

